@page "/Status"

@using HtmlAgilityPack;

@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime

<PageTitle>File System Access - Status</PageTitle>

@if (compareText is not null)
{
    <pre><code>
            @((MarkupString)compareText)
        </code></pre>
}
else
{
    <text>Loading WebIDL from specs ...</text>
}

@code {
    private string? compareText;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var domString = await HttpClient.GetStringAsync("https://wicg.github.io/file-system-access/#idl-index");

            var dom = new HtmlDocument();
            dom.LoadHtml(domString);
            var idlIndexHeader = dom.GetElementbyId("idl-index");
            var webIDLNode = idlIndexHeader.NextSibling.NextSibling;
            var webIDLText = webIDLNode.InnerText;
            // We normalize to indent with 4 spaces as that is inconsistent in the current WebIDL specs.
            var fetchedLines = webIDLText.Replace("    ", "  ").Replace("\n  ", "\n    ").Split('\n');
            var supportedLines = currentlySupportedWebIDL.Replace("<", "&lt;").Split('\n');
            var compareLines = new List<string>();
            var fetchedIndex = 0;
            var supportedIndex = 0;
            while (fetchedIndex < fetchedLines.Length || supportedIndex < supportedLines.Length)
            {
                var color = "pink";
                if (fetchedIndex == fetchedLines.Length)
                {
                    color = "cyan";
                    supportedIndex++;
                    fetchedIndex--;
                }
                else if (supportedIndex == supportedLines.Length)
                {
                    color = "lemonchiffon";
                }
                else if (fetchedLines[fetchedIndex].Trim() == supportedLines[supportedIndex].Trim())
                {
                    color = "lightgreen";
                    supportedIndex++;
                }
                compareLines.Add($"""<span style="background-color:{color};display:block;min-height:21px;">{fetchedLines[fetchedIndex++]}</span>""");
            }
            compareText = string.Join("", compareLines);
            StateHasChanged();
        }
    }

    private const string currentlySupportedWebIDL =
                @"enum FileSystemPermissionMode {
    ""read"",
    ""readwrite""
};

dictionary FileSystemPermissionDescriptor : PermissionDescriptor {
    required FileSystemHandle handle;
    FileSystemPermissionMode mode = ""read"";
};

dictionary FileSystemHandlePermissionDescriptor {
    FileSystemPermissionMode mode = ""read"";
};

[Exposed=(Window,Worker), SecureContext, Serializable]
partial interface FileSystemHandle {
    Promise<PermissionState> queryPermission(optional FileSystemHandlePermissionDescriptor descriptor = {});
    Promise<PermissionState> requestPermission(optional FileSystemHandlePermissionDescriptor descriptor = {});
};

enum WellKnownDirectory {
    ""desktop"",
    ""documents"",
    ""downloads"",
    ""music"",
    ""pictures"",
    ""videos"",
};

typedef (WellKnownDirectory or FileSystemHandle) StartInDirectory;

dictionary FilePickerAcceptType {
    USVString description = """";
    record<USVString, (USVString or sequence<USVString>)> accept;
};

dictionary FilePickerOptions {
    sequence<FilePickerAcceptType> types;
    boolean excludeAcceptAllOption = false;
    DOMString id;
    StartInDirectory startIn;
};

dictionary OpenFilePickerOptions : FilePickerOptions {
    boolean multiple = false;
};

dictionary SaveFilePickerOptions : FilePickerOptions {
    USVString? suggestedName;
};

dictionary DirectoryPickerOptions {
    DOMString id;
    StartInDirectory startIn;
    FileSystemPermissionMode mode = ""read"";
};

[SecureContext]
partial interface Window {
    Promise<sequence<FileSystemFileHandle>> showOpenFilePicker(optional OpenFilePickerOptions options = {});
    Promise<FileSystemFileHandle> showSaveFilePicker(optional SaveFilePickerOptions options = {});
    Promise<FileSystemDirectoryHandle> showDirectoryPicker(optional DirectoryPickerOptions options = {});
};";

}
